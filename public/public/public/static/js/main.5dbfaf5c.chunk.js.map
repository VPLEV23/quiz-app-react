{"version":3,"sources":["components/Home.js","components/Question.js","helpers/QuestionsHelper.js","components/ProgressBar.js","components/HUD.js","components/SaveScoreForm.js","components/Game.js","components/HighScores.js","App.js","serviceWorker.js","components/Firebase/firebase.js","components/Firebase/FirebaseContext.js","index.js"],"names":["Home","to","className","Question","question","changeQuestion","useState","classToApply","setClassToApply","selectedAnswer","setSelectedAnswer","answering","setAnswering","dangerouslySetInnerHTML","__html","answerChoices","map","choice","index","key","onClick","answer","bonus","setTimeout","checkAnswer","loadQuestions","a","amount","category","difficulty","type","url","fetch","res","json","results","convertQuestionsFromAPI","console","error","rawQuestions","loadedQuestion","formattedQuestion","incorrect_answers","Math","floor","random","splice","correct_answer","ProgressBar","max","width","current","id","style","HUD","score","questionNumber","SaveScoreForm","username","setUsername","onSubmit","e","preventDefault","record","name","log","placeholder","value","onChange","updatedUsername","target","disabled","Game","props","scoreSaved","history","push","state","questions","length","setState","prevState","done","randomQuestionIndex","currentQuestion","remainingQuestions","loading","this","Component","HighScores","App","exact","path","component","Boolean","window","location","hostname","match","config","apiKey","process","REACT_APP_API_KEY","authDomain","REACT_APP_AUTH_DOMAIN","databaseURL","REACT_APP_DATABASE_URL","projectId","REACT_APP_PROJECT_ID","storageBucket","REACT_APP_STORAGE_BUCKET","messagingSenderId","REACT_APP_MESSAGING_SENDER_ID","Firebase","scores","db","ref","app","initializeApp","database","FirebaseContext","React","createContext","ReactDOM","render","Provider","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5dbfaf5c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function Home() {\r\n  return (\r\n    <>\r\n      <h1>Quiz App</h1>\r\n      <Link to=\"/game\" className=\"btn\">\r\n        Start Game\r\n      </Link>\r\n      <Link to=\"/highScores\" className=\"btn\">\r\n        High Scores\r\n      </Link>\r\n    </>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function Question({ question, changeQuestion }) {\r\n  const [classToApply, setClassToApply] = useState(\"\");\r\n  const [selectedAnswer, setSelectedAnswer] = useState(-1);\r\n  const [answering, setAnswering] = useState(false);\r\n\r\n  const checkAnswer = (selectedAnswer) => {\r\n    if (answering) return;\r\n\r\n    setAnswering(true);\r\n    setSelectedAnswer(selectedAnswer);\r\n\r\n    const classToApply =\r\n      selectedAnswer === question.answer ? \"correct\" : \"incorrect\";\r\n    setClassToApply(classToApply);\r\n    const bonus = selectedAnswer === question.answer ? 10 : 0;\r\n\r\n    setTimeout(() => {\r\n      setSelectedAnswer(-1);\r\n      setAnswering(false);\r\n      changeQuestion(bonus);\r\n    }, 1000);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2 dangerouslySetInnerHTML={{ __html: question.question }}></h2>\r\n      {question.answerChoices.map((choice, index) => (\r\n        <div\r\n          key={index}\r\n          className={`choice-container ${\r\n            selectedAnswer === index && classToApply\r\n          }`}\r\n          onClick={() => checkAnswer(index)}\r\n        >\r\n          <p className=\"choice-prefix\">{index + 1}</p>\r\n          <p\r\n            className=\"choice-text\"\r\n            dangerouslySetInnerHTML={{ __html: choice }}\r\n          ></p>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n","export const loadQuestions = async (\r\n  amount = 10,\r\n  category = 9,\r\n  difficulty = \"easy\",\r\n  type = \"multiple\"\r\n) => {\r\n  const url = `https://opentdb.com/api.php?amount=${amount}&category=${category}&difficulty=${difficulty}&type=${type}`;\r\n\r\n  try {\r\n    const res = await fetch(url);\r\n    const { results } = await res.json();\r\n    return convertQuestionsFromAPI(results);\r\n  } catch (err) {\r\n    console.error(err);\r\n  }\r\n};\r\n\r\nconst convertQuestionsFromAPI = (rawQuestions) => {\r\n  return rawQuestions.map((loadedQuestion) => {\r\n    const formattedQuestion = {\r\n      question: loadedQuestion.question,\r\n      answerChoices: [...loadedQuestion.incorrect_answers],\r\n    };\r\n\r\n    formattedQuestion.answer = Math.floor(Math.random() * 4);\r\n\r\n    formattedQuestion.answerChoices.splice(\r\n      formattedQuestion.answer,\r\n      0,\r\n      loadedQuestion.correct_answer\r\n    );\r\n\r\n    return formattedQuestion;\r\n  });\r\n};\r\n","import React from \"react\";\r\n\r\nexport default function ProgressBar({ max, current }) {\r\n  const width = (current / max) * 100;\r\n  return (\r\n    <div id=\"progressBar\">\r\n      <div id=\"progressBarFull\" style={{ width: `${width}%` }}></div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport ProgressBar from \"./ProgressBar\";\r\n\r\nexport default function HUD({ score, questionNumber }) {\r\n  return (\r\n    <div id=\"hud\">\r\n      <div className=\"hud-item\">\r\n        <p className=\"hud-prefix\">Question {questionNumber}/10</p>\r\n        <ProgressBar max={10} current={questionNumber} />\r\n      </div>\r\n      <div className=\"hud-item\">\r\n        <p className=\"hud-prefix\">Score</p>\r\n        <h1 className=\"hud-main-text\">{score}</h1>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nexport default function SaveScoreForm({ score }) {\r\n  const [username, setUsername] = useState(\"\");\r\n\r\n  const onUsernameChange = (e) => {\r\n    const updatedUsername = e.target.value;\r\n    setUsername(updatedUsername);\r\n  };\r\n\r\n  const saveHighScore = (e) => {\r\n    e.preventDefault();\r\n    const record = {\r\n      name: username,\r\n      score,\r\n    };\r\n    console.log(record);\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h1>Score: {score}</h1>\r\n      <form onSubmit={saveHighScore}>\r\n        <input\r\n          type=\"text\"\r\n          name=\"username\"\r\n          id=\"username\"\r\n          placeholder=\"cool kid 123\"\r\n          value={username}\r\n          onChange={onUsernameChange}\r\n        />\r\n        <button type=\"submit\" className=\"btn\" disabled={!username}>\r\n          Save\r\n        </button>\r\n      </form>\r\n      <Link to=\"/\" className=\"btn\">\r\n        Go Home\r\n      </Link>\r\n    </div>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Question from \"./Question\";\r\nimport { loadQuestions } from \"../helpers/QuestionsHelper\";\r\nimport HUD from \"./HUD\";\r\nimport SaveScoreForm from \"./SaveScoreForm\";\r\n\r\nexport default class Game extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      questions: null,\r\n      currentQuestion: null,\r\n      loading: true,\r\n      score: 0,\r\n      questionNumber: 0,\r\n      done: false,\r\n    };\r\n  }\r\n  async componentDidMount() {\r\n    try {\r\n      const questions = await loadQuestions();\r\n      this.setState(\r\n        {\r\n          questions,\r\n        },\r\n        () => {\r\n          this.changeQuestion();\r\n        }\r\n      );\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  }\r\n\r\n  scoreSaved = () => {\r\n    this.props.history.push(\"/\");\r\n  };\r\n\r\n  changeQuestion = (bonus = 0) => {\r\n    if (this.state.questions.length === 0) {\r\n      return this.setState((prevState) => ({\r\n        done: true,\r\n        score: prevState.score + bonus,\r\n      }));\r\n    }\r\n\r\n    const randomQuestionIndex = Math.floor(\r\n      Math.random() * this.state.questions.length\r\n    );\r\n    const currentQuestion = this.state.questions[randomQuestionIndex];\r\n    const remainingQuestions = [...this.state.questions];\r\n    remainingQuestions.splice(randomQuestionIndex, 1);\r\n\r\n    this.setState((prevState) => ({\r\n      questions: remainingQuestions,\r\n      currentQuestion,\r\n      loading: false,\r\n      score: prevState.score + bonus,\r\n      questionNumber: prevState.questionNumber + 1,\r\n    }));\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      loading,\r\n      done,\r\n      score,\r\n      currentQuestion,\r\n      questionNumber,\r\n    } = this.state;\r\n    return (\r\n      <>\r\n        {loading && !done && <div id=\"loader\" />}\r\n\r\n        {!loading && !done && currentQuestion && (\r\n          <div>\r\n            <HUD score={score} questionNumber={questionNumber} />\r\n            <Question\r\n              question={currentQuestion}\r\n              changeQuestion={this.changeQuestion}\r\n            />\r\n          </div>\r\n        )}\r\n\r\n        {done && <SaveScoreForm score={score} scoreSaved={this.scoreSaved} />}\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function HighScores() {\r\n  return (\r\n    <>\r\n      <h1>High Scores</h1>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Home from \"./components/Home\";\nimport { Route, BrowserRouter as Router } from \"react-router-dom\";\nimport Game from \"./components/Game\";\nimport HighScores from \"./components/HighScores\";\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"container\">\n        <Route exact path=\"/\" component={Home} />\n        <Route path=\"/game\" component={Game} />\n        <Route path=\"/highScores\" component={HighScores} />\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import app from \"firebase/app\";\r\nimport \"firebase/database\";\r\n\r\nconst config = {\r\n  apiKey: process.env.REACT_APP_API_KEY,\r\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\r\n  projectId: process.env.REACT_APP_PROJECT_ID,\r\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\r\n};\r\n\r\nclass Firebase {\r\n  constructor() {\r\n    app.initializeApp(config);\r\n    this.db = app.database();\r\n  }\r\n\r\n  scores = () => this.db.ref(\"scores\");\r\n}\r\n\r\nexport default Firebase;\r\n","import React, { useContext } from \"react\";\r\n\r\nexport const FirebaseContext = React.createContext(null);\r\nexport const useFirebase = () => useContext(FirebaseContext);\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport Firebase from \"./components/Firebase/firebase\";\nimport { FirebaseContext } from \"./components/Firebase/FirebaseContext\";\n\nReactDOM.render(\n  <FirebaseContext.Provider value={new Firebase()}>\n    <App />\n  </FirebaseContext.Provider>,\n  document.getElementById(\"root\")\n);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}