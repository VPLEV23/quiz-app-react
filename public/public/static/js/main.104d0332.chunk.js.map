{"version":3,"sources":["components/Home.js","components/Question.js","helpers/QuestionsHelper.js","components/ProgressBar.js","components/HUD.js","components/Firebase/FirebaseContext.js","components/SaveScoreForm.js","components/Game.js","components/HighScores.js","App.js","serviceWorker.js","components/Firebase/Firebase.js","index.js"],"names":["Home","to","className","Question","question","changeQuestion","useState","classToApply","setClassToApply","selectedAnswer","setSelectedAnswer","answering","setAnswering","dangerouslySetInnerHTML","__html","answerChoices","map","choice","index","key","onClick","answer","bonus","setTimeout","checkAnswer","loadQuestions","a","amount","category","difficulty","type","url","fetch","res","json","results","convertQuestionsFromAPI","console","error","rawQuestions","loadedQuestion","formattedQuestion","incorrect_answers","Math","floor","random","splice","correct_answer","ProgressBar","max","width","current","id","style","HUD","score","questionNumber","FirebaseContext","React","createContext","useFirebase","useContext","SaveScoreForm","scoreSaved","username","setUsername","firebase","onSubmit","e","preventDefault","record","name","scores","push","placeholder","value","onChange","updatedUsername","target","disabled","Game","history","questions","setQuestions","currentQuestion","setCurrentQuestion","loading","setLoading","setScore","setQuestionNumber","done","setDone","useEffect","then","catch","useCallback","length","randomQuestionIndex","remainingQuestions","HighScores","setScores","once","snapshot","data","val","sortedScores","formatScoreData","firebaseScores","sort","score1","score2","slice","App","exact","path","component","Boolean","window","location","hostname","match","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","Firebase","db","ref","app","initializeApp","this","database","ReactDOM","render","Provider","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.104d0332.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nexport default function Home() {\n  return (\n    <>\n      <h1>Quiz App with Love by Vlad Bulgakov</h1>\n      <Link to=\"/game\" className=\"btn\">\n        Start Game\n      </Link>\n      <Link to=\"/highScores\" className=\"btn\">\n        High Scores\n      </Link>\n    </>\n  );\n}\n","import React, { useState } from 'react';\n\nexport default function Question({ question, changeQuestion }) {\n    const [classToApply, setClassToApply] = useState('');\n    const [selectedAnswer, setSelectedAnswer] = useState(-1);\n    const [answering, setAnswering] = useState(false);\n\n    const checkAnswer = (selectedAnswer) => {\n        if (answering) return;\n\n        setAnswering(true);\n        setSelectedAnswer(selectedAnswer);\n\n        const classToApply =\n            selectedAnswer === question.answer ? 'correct' : 'incorrect';\n        setClassToApply(classToApply);\n        const bonus = selectedAnswer === question.answer ? 10 : 0;\n\n        setTimeout(() => {\n            setSelectedAnswer(-1);\n            setAnswering(false);\n            changeQuestion(bonus);\n        }, 1000);\n    };\n\n    return (\n        <div>\n            <h2 dangerouslySetInnerHTML={{ __html: question.question }}></h2>\n            {question.answerChoices.map((choice, index) => (\n                <div\n                    key={index}\n                    className={`choice-container ${selectedAnswer === index &&\n                        classToApply}`}\n                    onClick={() => checkAnswer(index)}\n                >\n                    <p className=\"choice-prefix\">{index + 1}</p>\n                    <p\n                        className=\"choice-text\"\n                        dangerouslySetInnerHTML={{ __html: choice }}\n                    ></p>\n                </div>\n            ))}\n        </div>\n    );\n}\n","export const loadQuestions = async (\n    amount = 10,\n    category = 9,\n    difficulty = 'easy',\n    type = 'multiple'\n) => {\n    const url = `https://opentdb.com/api.php?amount=${amount}&category=${category}&difficulty=${difficulty}&type=${type}`;\n\n    try {\n        const res = await fetch(url);\n        const { results } = await res.json();\n        return convertQuestionsFromAPI(results);\n    } catch (err) {\n        console.error(err);\n    }\n};\n\nconst convertQuestionsFromAPI = (rawQuestions) => {\n    return rawQuestions.map((loadedQuestion) => {\n        const formattedQuestion = {\n            question: loadedQuestion.question,\n            answerChoices: [...loadedQuestion.incorrect_answers]\n        };\n\n        formattedQuestion.answer = Math.floor(Math.random() * 4);\n\n        formattedQuestion.answerChoices.splice(\n            formattedQuestion.answer,\n            0,\n            loadedQuestion.correct_answer\n        );\n\n        return formattedQuestion;\n    });\n};\n","import React from 'react';\n\nexport default function ProgressBar({ max, current }) {\n    const width = (current / max) * 100;\n    return (\n        <div id=\"progressBar\">\n            <div id=\"progressBarFull\" style={{ width: `${width}%` }}></div>\n        </div>\n    );\n}\n","import React from 'react';\nimport ProgressBar from './ProgressBar';\n\nexport default function HUD({ score, questionNumber }) {\n    return (\n        <div id=\"hud\">\n            <div className=\"hud-item\">\n                <p className=\"hud-prefix\">Question {questionNumber}/10</p>\n                <ProgressBar max={10} current={questionNumber} />\n            </div>\n            <div className=\"hud-item\">\n                <p className=\"hud-prefix\">Score</p>\n                <h1 className=\"hud-main-text\">{score}</h1>\n            </div>\n        </div>\n    );\n}\n","import React, { useContext } from 'react';\n\nexport const FirebaseContext = React.createContext(null);\nexport const useFirebase = () => useContext(FirebaseContext);\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useFirebase } from './Firebase/FirebaseContext';\nexport default function SaveScoreForm({ score, scoreSaved }) {\n    const [username, setUsername] = useState('');\n    const firebase = useFirebase();\n\n    const onUsernameChange = (e) => {\n        const updatedUsername = e.target.value;\n        setUsername(updatedUsername);\n    };\n\n    const saveHighScore = (e) => {\n        e.preventDefault();\n        const record = {\n            name: username,\n            score\n        };\n\n        firebase.scores().push(record, () => {\n            scoreSaved();\n        });\n    };\n\n    return (\n        <div className=\"container\">\n            <h1>Score: {score}</h1>\n            <form onSubmit={saveHighScore}>\n                <input\n                    type=\"text\"\n                    name=\"username\"\n                    id=\"username\"\n                    placeholder=\"cool kid 123\"\n                    value={username}\n                    onChange={onUsernameChange}\n                />\n                <button type=\"submit\" className=\"btn\" disabled={!username}>\n                    Save\n                </button>\n            </form>\n            <Link to=\"/\" className=\"btn\">\n                Go Home\n            </Link>\n        </div>\n    );\n}\n","import React, { useState, useEffect, useCallback } from 'react';\nimport Question from './Question';\nimport { loadQuestions } from '../helpers/QuestionsHelper';\nimport HUD from './HUD';\nimport SaveScoreForm from './SaveScoreForm';\n\nexport default function Game({ history }) {\n    const [questions, setQuestions] = useState([]);\n    const [currentQuestion, setCurrentQuestion] = useState(null);\n    const [loading, setLoading] = useState(true);\n    const [score, setScore] = useState(0);\n    const [questionNumber, setQuestionNumber] = useState(0);\n    const [done, setDone] = useState(false);\n\n    useEffect(() => {\n        loadQuestions()\n            .then(setQuestions)\n            .catch(console.error);\n    }, []);\n\n    const scoreSaved = () => {\n        history.push('/');\n    };\n\n    const changeQuestion = useCallback(\n        (bonus = 0) => {\n            if (questions.length === 0) {\n                setDone(true);\n                return setScore(score + bonus);\n            }\n\n            const randomQuestionIndex = Math.floor(\n                Math.random() * questions.length\n            );\n            const currentQuestion = questions[randomQuestionIndex];\n            const remainingQuestions = [...questions];\n            remainingQuestions.splice(randomQuestionIndex, 1);\n\n            setQuestions(remainingQuestions);\n            setCurrentQuestion(currentQuestion);\n            setLoading(false);\n            setScore(score + bonus);\n            setQuestionNumber(questionNumber + 1);\n        },\n        [\n            score,\n            questionNumber,\n            questions,\n            setQuestions,\n            setLoading,\n            setCurrentQuestion,\n            setQuestionNumber\n        ]\n    );\n\n    useEffect(() => {\n        if (!currentQuestion && questions.length) {\n            changeQuestion();\n        }\n    }, [currentQuestion, questions, changeQuestion]);\n\n    return (\n        <>\n            {loading && !done && <div id=\"loader\" />}\n\n            {!loading && !done && currentQuestion && (\n                <div>\n                    <HUD score={score} questionNumber={questionNumber} />\n                    <Question\n                        question={currentQuestion}\n                        changeQuestion={changeQuestion}\n                    />\n                </div>\n            )}\n\n            {done && <SaveScoreForm score={score} scoreSaved={scoreSaved} />}\n        </>\n    );\n}\n","import React, { useEffect, useState } from 'react';\nimport { useFirebase } from './Firebase/FirebaseContext';\n\nexport default function HighScores() {\n    const firebase = useFirebase();\n    const [scores, setScores] = useState([]);\n    const [loading, setLoading] = useState(true);\n\n    useEffect(() => {\n        firebase.scores().once('value', (snapshot) => {\n            const data = snapshot.val();\n            const sortedScores = formatScoreData(data);\n            setScores(sortedScores);\n            setLoading(false);\n        });\n    }, [firebase]);\n\n    const formatScoreData = (firebaseScores) => {\n        const scores = [];\n\n        for (let key in firebaseScores) {\n            const val = firebaseScores[key];\n            val['key'] = key;\n            scores.push(val);\n        }\n\n        return scores\n            .sort((score1, score2) => score2.score - score1.score)\n            .slice(0, 10);\n    };\n\n    return (\n        <>\n            {loading && <div id=\"loader\"></div>}\n            {!loading && (\n                <>\n                    <h1>High Scores</h1>\n                    <div id=\"highScoresList\">\n                        {scores.map((record) => (\n                            <li key={record.key} className=\"high-score\">\n                                {record.name} - {record.score}\n                            </li>\n                        ))}\n                    </div>\n                </>\n            )}\n        </>\n    );\n}\n","import React from 'react';\nimport './App.css';\nimport Home from './components/Home';\nimport { Route, BrowserRouter as Router } from 'react-router-dom';\nimport Game from './components/Game';\nimport HighScores from './components/HighScores';\n\nfunction App() {\n    return (\n        <Router>\n            <div className=\"container\">\n                <Route exact path=\"/\" component={Home} />\n                <Route path=\"/game\" component={Game} />\n                <Route path=\"/highScores\" component={HighScores} />\n            </div>\n        </Router>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import app from \"firebase/app\";\nimport \"firebase/database\";\n\nconst config = {\n  apiKey: \"AIzaSyBNgWxkXrGWI_7T1h2MdQn4gfW_DDWRy1Q\",\n  authDomain: \"quiz-b4aa2.firebaseapp.com\",\n  databaseURL: \"https://quiz-b4aa2.firebaseio.com\",\n  projectId: \"quiz-b4aa2\",\n  storageBucket: \"quiz-b4aa2.appspot.com\",\n  messagingSenderId: \"461338253036\",\n  appId: \"1:461338253036:web:9ba976061365e4cd46b7c9\",\n  measurementId: \"G-8VXSL5G9R9\",\n};\n\nclass Firebase {\n  constructor() {\n    app.initializeApp(config);\n    this.db = app.database();\n  }\n\n  scores = () => this.db.ref(\"scores\");\n}\n\nexport default Firebase;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Firebase from './components/Firebase/Firebase';\nimport { FirebaseContext } from './components/Firebase/FirebaseContext';\n\nReactDOM.render(\n    <FirebaseContext.Provider value={new Firebase()}>\n        <App />\n    </FirebaseContext.Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}